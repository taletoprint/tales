export interface StabilityGenerationRequest {
  prompt: string;
  negative_prompt?: string;
  width?: number;
  height?: number;
  steps?: number;
  cfg_scale?: number;
  seed?: number;
  samples?: number;
}

export interface StabilityGenerationResponse {
  artifacts: Array<{
    base64: string;
    seed: number;
    finishReason: string;
  }>;
}

export class StabilityAI {
  private apiKey: string;
  private baseUrl = 'https://api.stability.ai';

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  async generateImage(request: StabilityGenerationRequest): Promise<Buffer> {
    const payload = {
      text_prompts: [
        {
          text: request.prompt,
          weight: 1
        }
      ],
      cfg_scale: request.cfg_scale || 7,
      height: request.height || 512,
      width: request.width || 512,
      samples: request.samples || 1,
      steps: request.steps || 20,
    };

    // Add negative prompt if provided
    if (request.negative_prompt) {
      payload.text_prompts.push({
        text: request.negative_prompt,
        weight: -1
      });
    }

    const response = await fetch(
      `${this.baseUrl}/v1/generation/stable-diffusion-xl-1024-v1-0/text-to-image`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`,
          'Accept': 'application/json',
        },
        body: JSON.stringify(payload),
      }
    );

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(`Stability AI error: ${response.status} ${response.statusText} - ${JSON.stringify(errorData)}`);
    }

    const result: StabilityGenerationResponse = await response.json();
    
    if (!result.artifacts || result.artifacts.length === 0) {
      throw new Error('No images generated by Stability AI');
    }

    // Convert base64 to buffer
    const base64Data = result.artifacts[0].base64;
    return Buffer.from(base64Data, 'base64');
  }
}